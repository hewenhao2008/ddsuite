#!/bin/sh
BOARD="wr703n"
find_ssid_encryption(){
  local FID=$1;
  ssid_enc=$(iwlist wlan0 scanning | awk -v FID=$FID '
  BEGIN {
    count = 0;
    SSID = "N/A";
    ENC = "N/A";
    W2 = "N/A";
    W1 = "N/A";
    WPA = 0;
    WPA2 = 0;
    #printf("[");
  }
  function record(s, e, w2, w1){
    id = "";
    enc = "";
    type = "N/A";
    split(s,a,":");
    id = a[2];
    split(e,a,":");
    enc = a[2];
    if (enc == "on"){
      type = "WEP";
      ccmp = 0;
      tkip = 0;
      psk2 = 0;
      psk1 = 0;
      split(w2,a,":");
      if(a[2]){      
        split(a[2], r, " ");
        if(r[1] == "CCMP")
          ccmp = 1;
        if(r[1] == "TKIP")
          tkip = 1;
        if(r[2] == "CCMP")
          ccmp = 1;
        if(r[2] == "TKIP")
          tkip = 1;
        psk2 = a[2];
      }
      split(w1,a,":");
      if(a[2]){
        split(a[2], r, " ");
        if(r[1] == "CCMP")
          ccmp = 1;
        if(r[1] == "TKIP")
          tkip = 1;
        if(r[2] == "CCMP")
          ccmp = 1;
        if(r[2] == "TKIP")
          tkip = 1;
        psk1 = a[2];
      }
      if (psk1 != 0 && psk2 != 0){
        type = "mixed-psk";
        if(tkip)
          type =(type"+tkip");
        if(ccmp)
          type =(type"+ccmp");
      }else if(psk1 == 0 && psk2 != 0){
        type = "psk2";
        if(tkip)
          type =(type"+tkip");
        if(ccmp)
          type =(type"+ccmp");
      }else if(psk1 != 0 && psk2 == 0){
        type = "psk";
        if(tkip)
          type =(type"+tkip");
        if(ccmp)
          type =(type"+ccmp");
      }
    }
    split(id, i, "\"");
    id=i[2];
    if(id == FID){
      count++;
      if(count>1) print ","
      #printf("{\"ssid\":\"%s\",\"enc\":\"%s\", \"type\":\"%s\"}", id, enc, type);
      printf("%s", type);
    }
  }
  {
    match($0, /Cell ([0-9]+) - Address:/);
    if(RLENGTH != -1){
      if(SSID != "N/A"){
        record(SSID, ENC, W2, W1);
      }
      SSID = "N/A";
      ENC = "N/A";
      W2 = "N/A";
      W1 = "N/A";
      WPA = 0;
      WPA2 = 0;
    }
  }
  {
    match($0, /ESSID:"(.+)"/);
    if(RLENGTH != -1)
      SSID=$0;
  }
  {
    match($0, /Encryption key:(.+)/);
    if(RLENGTH != -1)
      ENC=$0;
  }
  {
    match($0, /IE: IEEE 802.11i\/WPA2 Version 1/);
    if(RLENGTH != -1){
      WPA2=1;
    }
    match($0, /IE: WPA Version 1/);
    if(RLENGTH != -1){
      WPA=1;
    }
  }
  {
    match($0, /Pairwise Ciphers(.+)/);
    if(RLENGTH != -1){
      if(WPA2==1){
        W2=$0;
      }
      if(WPA==1){
        W1=$0;
      }    
    }
  }

  {
    match($0, /Authentication Suites \(1\) : PSK/);
    if(RLENGTH != -1 && WPA2==1){
      WPA2=0;
    }
    if(RLENGTH != -1 && WPA==1){
      WPA=0;
    }
  }
  END{
    if(SSID != "N/A"){
      record(SSID, ENC, W2, W1);
    }  
    #printf("]");
  }
  ')
  return 0;
}

download_and_flash(){
  APP=music-box.bin
  URL=$1
  PWD=`pwd`

  cd /tmp/
  wget "$URL" -O ${APP}.tar.gz
  tar -zxf ${APP}.tar.gz
  if [ -e ${APP} ]; then    
    mtd -r write /tmp/${APP} firmware
  fi
}

action_rsync(){
  local MBOX_TING=/bin/music-box/$BOARD/ting
  if [ -f ${MBOX_TING} ]; then
    rm -f /tmp/music-box
    ln -s /bin/music-box /tmp/music-box
    $MBOX_TING
  fi
}

action_upgrade(){
  VERSION=`uci get ddsuite.main.version`
  QUERY="http://m.jdodo.cn/api/image?board=$BOARD&version=${VERSION}"
  # echo $QUERY
  SRC_URL=`wget -q -O- $QUERY`
  if ! test x$SRC_URL = x; then
    echo $SRC_URL
    if test $SRC_URL = "N/A"; then
      echo "NOT support this board or NOT need upgrade!"
      exit 1
    fi
    download_and_flash $SRC_URL
  fi
}

action_wifi_sta(){
  CONF=/etc/ddsuite/ddsuite.conf
  if [ -e $CONF ]; then
    echo "ddsuite.conf is exist"
    . $CONF
    echo $STA_SSID $STA_KEY $STA_ENC
    find_ssid_encryption $STA_SSID
    if ! test x$ssid_enc = x; then      
      wifi down      
      uci set wireless.@wifi-iface[0].network=wan
      uci set wireless.@wifi-iface[0].mode=sta
      if test $ssid_enc = "N/A"; then
        uci set wireless.@wifi-iface[0].encryption=none
        uci set wireless.@wifi-iface[0].key=
      else
        uci set wireless.@wifi-iface[0].encryption=$ssid_enc
        uci set wireless.@wifi-iface[0].key=$STA_KEY
      fi
      uci set wireless.@wifi-iface[0].ssid=$STA_SSID
      wifi up
      uci export wireless
      TICK=15
      GATEWAY=
      while : ; do
        sleep 1
        GATEWAY=`route -e|grep default|awk '{print $2}'`
        TICK=$(( $TICK - 1))
        if ! test x$GATEWAY = x; then
           echo "default gateway: $GATEWAY"
           break;
        fi
        if [ "$TICK" -eq 0 ]; then
          echo "default gateway timeout!"
          break;
        fi
      done
      if test x${GATEWAY} = x; then
        echo "failed to change sta mode!"
        MAC456=`cat /sys/class/ieee80211/phy0/macaddress|awk -F ':' '{print $4$5$6}'`
        wifi down
        uci set wireless.@wifi-iface[0].network=lan
        uci set wireless.@wifi-iface[0].mode=ap
        uci set wireless.@wifi-iface[0].encryption=none
        uci set wireless.@wifi-iface[0].ssid=musicbox-$MAC456
        uci set wireless.@wifi-iface[0].key=
        wifi up
      else
        action_rsync
      fi
    fi
  else
    echo "ddsuite.conf NOT exist"
  fi
}

case $1 in
  rsync)
    action_rsync
    ;;
  upgrade)
    action_upgrade
    ;;
  wifi_sta)
    action_wifi_sta
    ;;
  *)
  echo "usage: ddsuite rsync | upgrade | wifi_sta"
  ;;
esac
